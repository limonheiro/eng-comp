CCS PCM C Compiler, Version 5.008, 5967               10-mai-19 21:54

               Filename:   C:\Users\sky\Documents\CCS C Projects\projeto02_teclado_lcd_motores\projeto2.lst

               ROM used:   465 words (6%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           20 (5%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1B1
0003:  NOP
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 8C,16
000D:  DATA AD,16
000E:  DATA AD,16
000F:  DATA C4,24
0010:  DATA C7,24
0011:  DATA D4,22
0012:  DATA AD,16
0013:  DATA AD,16
0014:  DATA 2D,05
0015:  DATA 00,00
*
0164:  MOVF   0B,W
0165:  MOVWF  21
0166:  BCF    0B.7
0167:  BSF    03.5
0168:  BSF    03.6
0169:  BSF    0C.7
016A:  BSF    0C.0
016B:  NOP
016C:  NOP
016D:  BCF    03.5
016E:  MOVF   0C,W
016F:  ANDLW  7F
0170:  BTFSC  03.2
0171:  GOTO   1AB
0172:  BCF    03.6
0173:  MOVWF  22
0174:  BSF    03.6
0175:  MOVF   0D,W
0176:  BCF    03.6
0177:  MOVWF  23
0178:  BSF    03.6
0179:  MOVF   0F,W
017A:  BCF    03.6
017B:  MOVWF  24
017C:  MOVF   22,W
017D:  MOVWF  25
017E:  CALL   138
017F:  MOVF   23,W
0180:  BSF    03.6
0181:  MOVWF  0D
0182:  BCF    03.6
0183:  MOVF   24,W
0184:  BSF    03.6
0185:  MOVWF  0F
0186:  BSF    03.5
0187:  BSF    0C.7
0188:  BSF    0C.0
0189:  NOP
018A:  NOP
018B:  BCF    03.5
018C:  RLF    0C,W
018D:  RLF    0E,W
018E:  ANDLW  7F
018F:  BTFSC  03.2
0190:  GOTO   1AB
0191:  BCF    03.6
0192:  MOVWF  22
0193:  BSF    03.6
0194:  MOVF   0D,W
0195:  BCF    03.6
0196:  MOVWF  23
0197:  BSF    03.6
0198:  MOVF   0F,W
0199:  BCF    03.6
019A:  MOVWF  24
019B:  MOVF   22,W
019C:  MOVWF  25
019D:  CALL   138
019E:  MOVF   23,W
019F:  BSF    03.6
01A0:  MOVWF  0D
01A1:  BCF    03.6
01A2:  MOVF   24,W
01A3:  BSF    03.6
01A4:  MOVWF  0F
01A5:  INCF   0D,F
01A6:  BTFSC  03.2
01A7:  INCF   0F,F
01A8:  BCF    03.6
01A9:  GOTO   167
01AA:  BSF    03.6
01AB:  BCF    03.6
01AC:  BTFSC  21.7
01AD:  BSF    0B.7
01AE:  BCF    0A.3
01AF:  BCF    0A.4
01B0:  GOTO   1CC (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
*
0016:  MOVLW  26
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   029
001C:  MOVLW  06
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  7B
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 00,F
0028:  GOTO   01C
0029:  RETURN
....................  
.................... #define LCD_RS_PIN      PIN_B0                                    //// 
.................... #define LCD_RW_PIN      PIN_B1                                    //// 
.................... #define LCD_ENABLE_PIN  PIN_B2                                    //// 
.................... #define LCD_DATA4       PIN_B3                                    //// 
.................... #define LCD_DATA5       PIN_B4                                    //// 
.................... #define LCD_DATA6       PIN_B5                                    //// 
.................... #define LCD_DATA7       PIN_B6  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0093:  BSF    06.3
....................    output_float(LCD_DATA5); 
0094:  BSF    06.4
....................    output_float(LCD_DATA6); 
0095:  BSF    06.5
....................    output_float(LCD_DATA7); 
0096:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0097:  BCF    03.5
0098:  BSF    06.1
0099:  BSF    03.5
009A:  BCF    06.1
....................    delay_cycles(1); 
009B:  NOP
....................    lcd_output_enable(1); 
009C:  BCF    03.5
009D:  BSF    06.2
009E:  BSF    03.5
009F:  BCF    06.2
....................    delay_cycles(1); 
00A0:  NOP
....................    high = lcd_read_nibble(); 
00A1:  BCF    03.5
00A2:  CALL   05A
00A3:  MOVF   78,W
00A4:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
00A5:  BCF    06.2
00A6:  BSF    03.5
00A7:  BCF    06.2
....................    delay_cycles(1); 
00A8:  NOP
....................    lcd_output_enable(1); 
00A9:  BCF    03.5
00AA:  BSF    06.2
00AB:  BSF    03.5
00AC:  BCF    06.2
....................    delay_us(1); 
00AD:  GOTO   0AE
00AE:  GOTO   0AF
00AF:  NOP
....................    low = lcd_read_nibble(); 
00B0:  BCF    03.5
00B1:  CALL   05A
00B2:  MOVF   78,W
00B3:  MOVWF  2C
....................        
....................    lcd_output_enable(0); 
00B4:  BCF    06.2
00B5:  BSF    03.5
00B6:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B7:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00B8:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00B9:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00BA:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00BB:  BCF    03.5
00BC:  SWAPF  2D,W
00BD:  MOVWF  77
00BE:  MOVLW  F0
00BF:  ANDWF  77,F
00C0:  MOVF   77,W
00C1:  IORWF  2C,W
00C2:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005A:  CLRF   2E
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
005B:  BSF    03.5
005C:  BSF    06.3
005D:  MOVLW  00
005E:  BCF    03.5
005F:  BTFSC  06.3
0060:  MOVLW  01
0061:  IORWF  2E,F
....................    n |= input(LCD_DATA5) << 1; 
0062:  BSF    03.5
0063:  BSF    06.4
0064:  MOVLW  00
0065:  BCF    03.5
0066:  BTFSC  06.4
0067:  MOVLW  01
0068:  MOVWF  77
0069:  BCF    03.0
006A:  RLF    77,F
006B:  MOVF   77,W
006C:  IORWF  2E,F
....................    n |= input(LCD_DATA6) << 2; 
006D:  BSF    03.5
006E:  BSF    06.5
006F:  MOVLW  00
0070:  BCF    03.5
0071:  BTFSC  06.5
0072:  MOVLW  01
0073:  MOVWF  77
0074:  RLF    77,F
0075:  RLF    77,F
0076:  MOVLW  FC
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  2E,F
....................    n |= input(LCD_DATA7) << 3; 
007A:  BSF    03.5
007B:  BSF    06.6
007C:  MOVLW  00
007D:  BCF    03.5
007E:  BTFSC  06.6
007F:  MOVLW  01
0080:  MOVWF  77
0081:  RLF    77,F
0082:  RLF    77,F
0083:  RLF    77,F
0084:  MOVLW  F8
0085:  ANDWF  77,F
0086:  MOVF   77,W
0087:  IORWF  2E,F
....................     
....................    return(n); 
0088:  MOVF   2E,W
0089:  MOVWF  78
....................   #else 
008A:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002A:  BTFSC  2D.0
002B:  GOTO   02E
002C:  BCF    06.3
002D:  GOTO   02F
002E:  BSF    06.3
002F:  BSF    03.5
0030:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0031:  BCF    03.5
0032:  BTFSC  2D.1
0033:  GOTO   036
0034:  BCF    06.4
0035:  GOTO   037
0036:  BSF    06.4
0037:  BSF    03.5
0038:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0039:  BCF    03.5
003A:  BTFSC  2D.2
003B:  GOTO   03E
003C:  BCF    06.5
003D:  GOTO   03F
003E:  BSF    06.5
003F:  BSF    03.5
0040:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0041:  BCF    03.5
0042:  BTFSC  2D.3
0043:  GOTO   046
0044:  BCF    06.6
0045:  GOTO   047
0046:  BSF    06.6
0047:  BSF    03.5
0048:  BCF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0049:  NOP
....................    lcd_output_enable(1); 
004A:  BCF    03.5
004B:  BSF    06.2
004C:  BSF    03.5
004D:  BCF    06.2
....................    delay_us(2); 
004E:  MOVLW  02
004F:  MOVWF  77
0050:  DECFSZ 77,F
0051:  GOTO   050
0052:  GOTO   053
0053:  NOP
....................    lcd_output_enable(0); 
0054:  BCF    03.5
0055:  BCF    06.2
0056:  BSF    03.5
0057:  BCF    06.2
0058:  BCF    03.5
0059:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
008B:  BSF    03.5
008C:  BCF    06.2
....................    lcd_rs_tris(); 
008D:  BCF    06.0
....................    lcd_rw_tris(); 
008E:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008F:  BCF    03.5
0090:  BCF    06.0
0091:  BSF    03.5
0092:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C3:  MOVF   78,W
00C4:  MOVWF  2C
00C5:  BTFSS  2C.7
00C6:  GOTO   0C9
00C7:  BSF    03.5
00C8:  GOTO   093
....................    lcd_output_rs(address); 
00C9:  MOVF   2A,F
00CA:  BTFSS  03.2
00CB:  GOTO   0CE
00CC:  BCF    06.0
00CD:  GOTO   0CF
00CE:  BSF    06.0
00CF:  BSF    03.5
00D0:  BCF    06.0
....................    delay_cycles(1); 
00D1:  NOP
....................    lcd_output_rw(0); 
00D2:  BCF    03.5
00D3:  BCF    06.1
00D4:  BSF    03.5
00D5:  BCF    06.1
....................    delay_cycles(1); 
00D6:  NOP
....................    lcd_output_enable(0); 
00D7:  BCF    03.5
00D8:  BCF    06.2
00D9:  BSF    03.5
00DA:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00DB:  BCF    03.5
00DC:  SWAPF  2B,W
00DD:  MOVWF  2C
00DE:  MOVLW  0F
00DF:  ANDWF  2C,F
00E0:  MOVF   2C,W
00E1:  MOVWF  2D
00E2:  CALL   02A
....................    lcd_send_nibble(n & 0xf); 
00E3:  MOVF   2B,W
00E4:  ANDLW  0F
00E5:  MOVWF  2C
00E6:  MOVWF  2D
00E7:  CALL   02A
00E8:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E9:  BSF    03.5
00EA:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00EB:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00EC:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00ED:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00EE:  BCF    06.2
....................    lcd_rs_tris(); 
00EF:  BCF    06.0
....................    lcd_rw_tris(); 
00F0:  BCF    06.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00F1:  BCF    03.5
00F2:  BCF    06.0
00F3:  BSF    03.5
00F4:  BCF    06.0
....................    lcd_output_rw(0); 
00F5:  BCF    03.5
00F6:  BCF    06.1
00F7:  BSF    03.5
00F8:  BCF    06.1
....................    lcd_output_enable(0); 
00F9:  BCF    03.5
00FA:  BCF    06.2
00FB:  BSF    03.5
00FC:  BCF    06.2
....................      
....................    delay_ms(15); 
00FD:  MOVLW  0F
00FE:  BCF    03.5
00FF:  MOVWF  26
0100:  CALL   016
....................    for(i=1;i<=3;++i) 
0101:  MOVLW  01
0102:  MOVWF  21
0103:  MOVF   21,W
0104:  SUBLW  03
0105:  BTFSS  03.0
0106:  GOTO   10F
....................    { 
....................        lcd_send_nibble(3); 
0107:  MOVLW  03
0108:  MOVWF  2D
0109:  CALL   02A
....................        delay_ms(5); 
010A:  MOVLW  05
010B:  MOVWF  26
010C:  CALL   016
010D:  INCF   21,F
010E:  GOTO   103
....................    } 
....................     
....................    lcd_send_nibble(2); 
010F:  MOVLW  02
0110:  MOVWF  2D
0111:  CALL   02A
....................    delay_ms(5); 
0112:  MOVLW  05
0113:  MOVWF  26
0114:  CALL   016
....................    for(i=0;i<=3;++i) 
0115:  CLRF   21
0116:  MOVF   21,W
0117:  SUBLW  03
0118:  BTFSS  03.0
0119:  GOTO   123
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
011A:  MOVF   21,W
011B:  CALL   004
011C:  MOVWF  22
011D:  CLRF   2A
011E:  MOVF   22,W
011F:  MOVWF  2B
0120:  CALL   08B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0121:  INCF   21,F
0122:  GOTO   116
0123:  BCF    0A.3
0124:  BCF    0A.4
0125:  GOTO   1BE (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0126:  DECFSZ 27,W
0127:  GOTO   129
0128:  GOTO   12C
....................       address=LCD_LINE_TWO; 
0129:  MOVLW  40
012A:  MOVWF  28
012B:  GOTO   12D
....................    else 
....................       address=0; 
012C:  CLRF   28
....................       
....................    address+=x-1; 
012D:  MOVLW  01
012E:  SUBWF  26,W
012F:  ADDWF  28,F
....................    lcd_send_byte(0,0x80|address); 
0130:  MOVF   28,W
0131:  IORLW  80
0132:  MOVWF  29
0133:  CLRF   2A
0134:  MOVF   29,W
0135:  MOVWF  2B
0136:  CALL   08B
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0137:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0138:  MOVF   25,W
0139:  XORLW  07
013A:  BTFSC  03.2
013B:  GOTO   146
013C:  XORLW  0B
013D:  BTFSC  03.2
013E:  GOTO   14B
013F:  XORLW  06
0140:  BTFSC  03.2
0141:  GOTO   153
0142:  XORLW  02
0143:  BTFSC  03.2
0144:  GOTO   159
0145:  GOTO   15E
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0146:  MOVLW  01
0147:  MOVWF  26
0148:  MOVWF  27
0149:  CALL   126
014A:  GOTO   163
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
014B:  CLRF   2A
014C:  MOVLW  01
014D:  MOVWF  2B
014E:  CALL   08B
....................                      delay_ms(2); 
014F:  MOVLW  02
0150:  MOVWF  26
0151:  CALL   016
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0152:  GOTO   163
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0153:  MOVLW  01
0154:  MOVWF  26
0155:  MOVLW  02
0156:  MOVWF  27
0157:  CALL   126
0158:  GOTO   163
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0159:  CLRF   2A
015A:  MOVLW  10
015B:  MOVWF  2B
015C:  CALL   08B
015D:  GOTO   163
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
015E:  MOVLW  01
015F:  MOVWF  2A
0160:  MOVF   25,W
0161:  MOVWF  2B
0162:  CALL   08B
....................      #endif 
....................    } 
0163:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
01B1:  MOVF   03,W
01B2:  ANDLW  1F
01B3:  MOVWF  03
01B4:  BSF    03.5
01B5:  BSF    1F.0
01B6:  BSF    1F.1
01B7:  BSF    1F.2
01B8:  BCF    1F.3
01B9:  MOVLW  07
01BA:  MOVWF  1C
01BB:  BCF    03.7
.................... { 
....................  
....................    //setup_adc_ports(AN0); 
....................    //kbd_init(); 
....................  
....................    lcd_init(); 
01BC:  BCF    03.5
01BD:  GOTO   0E9
....................    delay_ms(1000); 
01BE:  MOVLW  04
01BF:  MOVWF  21
01C0:  MOVLW  FA
01C1:  MOVWF  26
01C2:  CALL   016
01C3:  DECFSZ 21,F
01C4:  GOTO   1C0
....................    printf(lcd_putc, "\f-----DIGITE-----\n"); 
01C5:  MOVLW  0C
01C6:  BSF    03.6
01C7:  MOVWF  0D
01C8:  MOVLW  00
01C9:  MOVWF  0F
01CA:  BCF    03.6
01CB:  GOTO   164
....................    delay_ms(50); 
01CC:  MOVLW  32
01CD:  MOVWF  26
01CE:  CALL   016
....................        
....................    //char c;   
....................     
....................    while(true){ 
01CF:  GOTO   1CF
....................       //c = kbd_getc(); 
....................       //delay_ms(1); 
....................       //if(c!=0){ 
....................          //printf(lcd_putc, "%c", c); 
....................          //delay_ms(300); 
....................       //} 
....................    } 
.................... } 
01D0:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
